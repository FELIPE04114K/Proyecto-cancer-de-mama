import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_breast_cancer
from dotenv import load_dotenv
import os

load_dotenv()
#Lectura
ruta = os.getenv("DB_URL")
data= pd.read_csv(ruta)


# Normalizamos los nombres de las columnas
data.columns = [col.strip().lower() for col in data.columns]

# Mostrar al usuario qu칠 variables hay
print("Columnas disponibles en los datos:")
print(data.columns)
print("\nEjemplo de los datos cargados:")
print(data.head())

# Funci칩n para mostrar gr치fica circular de clasificaci칩n
def mostrar_conteo():
    conteo = data['clasificaci칩n'].value_counts()
    etiquetas = ['Con c치ncer' if val == 1 else 'Sin c치ncer' for val in conteo.index]
    colores = ['#ff9999', '#99ff99']

    plt.figure(figsize=(6,6))
    plt.pie(conteo, labels=etiquetas, autopct='%1.1f%%', colors=colores, startangle=140)
    plt.title('Distribuci칩n general de los diagn칩sticos')
    plt.show()

# Gr치fica de barras comparando el promedio de una variable seg칰n el diagn칩stico
def graficar_variable(variable):
    plt.figure(figsize=(8,5))
    data.groupby('clasificaci칩n')[variable].mean().plot(kind='bar', color=['#99ff99', '#ff9999'])

    plt.xticks([0,1], ['Sin c치ncer', 'Con c치ncer'], rotation=0)
    plt.title(f'Promedio de {variable.capitalize()} seg칰n diagn칩stico')
    plt.ylabel(f'Nivel de {variable}')
    plt.xlabel("Diagn칩stico")
    plt.grid(axis='y')
    plt.tight_layout()
    plt.show()

# Diagn칩stico personalizado mejorado
def diagnostico_individual(variable):
    while True:
        entrada = input(f"\nIngresa tu valor de {variable.capitalize()} (o escribe 'volver' para regresar al men칰): ").strip().lower()

        if entrada == 'volver':
            break

        try:
            valor = float(entrada)
        except ValueError:
            print("丘멆잺 Por favor, ingresa un n칰mero v치lido.")
            continue

        media = data[variable].mean()
        std = data[variable].std()

        if valor < media - std:
            estado = 'BAJO'
            descripcion = f"Tu nivel de {variable} es m치s bajo de lo habitual comparado con el promedio general."
        elif valor > media + std:
            estado = 'ALTO'
            descripcion = f"Tu nivel de {variable} es m치s alto de lo habitual comparado con el promedio general."
        else:
            estado = 'NORMAL'
            descripcion = f"Tu nivel de {variable} est치 dentro del rango promedio esperado."

        # Comparaci칩n con grupo (con/sin c치ncer)
        promedio_con = data[data['clasificaci칩n'] == 1][variable].mean()
        promedio_sin = data[data['clasificaci칩n'] == 0][variable].mean()
        grupo_asociado = "personas CON c치ncer de mama" if abs(valor - promedio_con) < abs(valor - promedio_sin) else "personas SIN c치ncer de mama"

        # Mostrar resultado
        print(f"\n游녤 Tu nivel de {variable.capitalize()} es {estado}.")
        print(f"   (Tu valor: {valor} | Promedio general: {media:.2f})")
        print(f"游늷 {descripcion}")
        print(f"游늵 Seg칰n los datos, tu valor se parece m치s al grupo de {grupo_asociado}.")

        # Mostrar histograma con valor del usuario
        plt.figure(figsize=(8,5))
        sns.histplot(data[variable], kde=True, bins=25, color='skyblue')
        plt.axvline(valor, color='red', linestyle='--', linewidth=2, label='Tu valor')
        plt.title(f'Distribuci칩n de {variable.capitalize()} en la poblaci칩n del estudio')
        plt.xlabel(variable.capitalize())
        plt.ylabel('N칰mero de personas')
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        plt.show()

        print("游늳 La gr치fica muestra c칩mo se distribuye esta variable entre todas las personas del estudio.")
        print("游댮 La l칤nea roja indica tu valor y permite ver si est치s dentro o fuera del rango com칰n.\n")

# Mostrar estad칤sticas generales por grupo
def mostrar_estadisticas():
    print("\nEstad칤sticas generales (promedios por grupo):")
    resumen = data.groupby('clasificaci칩n').mean(numeric_only=True)
    resumen.index = ['Sin c치ncer', 'Con c치ncer']
    print(resumen.round(2))

# Men칰 principal interactivo
def menu():
    while True:
        print("\n=========== MEN칔 DE EVALUACI칍N M칄DICA ===========")
        print("1. Ver distribuci칩n general de diagn칩sticos")
        print("2. Comparar variable entre personas con/sin c치ncer")
        print("3. Ingresar mi valor personal y comparar con la poblaci칩n")
        print("4. Ver resumen general (estad칤sticas)")
        print("5. Salir del sistema")
        print("==================================================")

        opcion = input("Escribe el n칰mero de la opci칩n que deseas realizar: ").strip()

        if opcion == "1":
            mostrar_conteo()

        elif opcion == "2":
            print("\nVariables disponibles para comparar:")
            for col in data.columns:
                if col != 'clasificaci칩n':
                    print(f"游댳 {col}")
            var = input("Escribe el nombre exacto de la variable: ").strip().lower()
            if var in data.columns and var != 'clasificaci칩n':
                graficar_variable(var)
            else:
                print("丘멆잺 Variable no v치lida. Intenta de nuevo.")

        elif opcion == "3":
            print("\nVariables disponibles para evaluaci칩n personal:")
            for col in data.columns:
                if col != 'clasificaci칩n':
                    print(f"游댳 {col}")
            var = input("Escribe la variable a evaluar: ").strip().lower()
            if var in data.columns and var != 'clasificaci칩n':
                diagnostico_individual(var)
            else:
                print("丘멆잺 Variable no v치lida. Intenta de nuevo.")

        elif opcion == "4":
            mostrar_estadisticas()

        elif opcion == "5":
            print("\nGracias por usar este sistema de evaluaci칩n m칠dica sencilla. 춰Cu칤date mucho!")
            break

        else:
            print("丘멆잺 Opci칩n no reconocida. Por favor elige una opci칩n v치lida del men칰.")

# Ejecutar men칰
menu()

